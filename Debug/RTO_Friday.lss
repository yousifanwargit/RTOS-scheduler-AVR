
RTO_Friday.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  00000dea  2**0
                  ALLOC
  2 .stab         000013b0  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d86  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_10>
  2c:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 06 	call	0xce0	; 0xce0 <main>
  74:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MDIO_voidInit>:
#include "../include/MCAL/DIO/DIO_private.h"
#include "../include/MCAL/DIO/DIO_configuration.h"


void MDIO_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	80 83       	st	Z, r24
					   ,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION
					   ,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION
					   ,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	80 83       	st	Z, r24
					   ,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION
					   ,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION
					   ,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION
  94:	e4 e3       	ldi	r30, 0x34	; 52
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
					   ,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION
					   ,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION
					   ,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION
  9c:	e1 e3       	ldi	r30, 0x31	; 49
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	82 e2       	ldi	r24, 0x22	; 34
  a2:	80 83       	st	Z, r24
					   ,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION
					   ,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION
					   ,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
					    ,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE
					    ,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE
					    ,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE
  aa:	e8 e3       	ldi	r30, 0x38	; 56
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
						,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE
						,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE
						,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE
  b0:	e5 e3       	ldi	r30, 0x35	; 53
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
						,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE
						,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE
						,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE
  b6:	e2 e3       	ldi	r30, 0x32	; 50
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
						,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE
						,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE
						,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <MDIO_voidSetPinDirection>:
/* A_u8PortId   : DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD 			  */
/* A_u8PinId    : PIN0 ... PIN7                                 			  */
/* A_u8Direction: DIO_INPUT - DIO_OUTPUT                        			  */
/******************************************************************************/
void MDIO_voidSetPinDirection (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2d 97       	sbiw	r28, 0x0d	; 13
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	6a 83       	std	Y+2, r22	; 0x02
  da:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	3d 87       	std	Y+13, r19	; 0x0d
  e4:	2c 87       	std	Y+12, r18	; 0x0c
  e6:	8c 85       	ldd	r24, Y+12	; 0x0c
  e8:	9d 85       	ldd	r25, Y+13	; 0x0d
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	09 f4       	brne	.+2      	; 0xf2 <MDIO_voidSetPinDirection+0x30>
  f0:	4f c0       	rjmp	.+158    	; 0x190 <MDIO_voidSetPinDirection+0xce>
  f2:	2c 85       	ldd	r18, Y+12	; 0x0c
  f4:	3d 85       	ldd	r19, Y+13	; 0x0d
  f6:	22 30       	cpi	r18, 0x02	; 2
  f8:	31 05       	cpc	r19, r1
  fa:	2c f4       	brge	.+10     	; 0x106 <MDIO_voidSetPinDirection+0x44>
  fc:	8c 85       	ldd	r24, Y+12	; 0x0c
  fe:	9d 85       	ldd	r25, Y+13	; 0x0d
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	71 f0       	breq	.+28     	; 0x120 <MDIO_voidSetPinDirection+0x5e>
 104:	ec c0       	rjmp	.+472    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
 106:	2c 85       	ldd	r18, Y+12	; 0x0c
 108:	3d 85       	ldd	r19, Y+13	; 0x0d
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	09 f4       	brne	.+2      	; 0x112 <MDIO_voidSetPinDirection+0x50>
 110:	77 c0       	rjmp	.+238    	; 0x200 <MDIO_voidSetPinDirection+0x13e>
 112:	8c 85       	ldd	r24, Y+12	; 0x0c
 114:	9d 85       	ldd	r25, Y+13	; 0x0d
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	91 05       	cpc	r25, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <MDIO_voidSetPinDirection+0x5c>
 11c:	a9 c0       	rjmp	.+338    	; 0x270 <MDIO_voidSetPinDirection+0x1ae>
 11e:	df c0       	rjmp	.+446    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
	{
	case DIO_PORTA:
					switch (A_u8Direction)
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	3b 87       	std	Y+11, r19	; 0x0b
 128:	2a 87       	std	Y+10, r18	; 0x0a
 12a:	8a 85       	ldd	r24, Y+10	; 0x0a
 12c:	9b 85       	ldd	r25, Y+11	; 0x0b
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	31 f0       	breq	.+12     	; 0x13e <MDIO_voidSetPinDirection+0x7c>
 132:	2a 85       	ldd	r18, Y+10	; 0x0a
 134:	3b 85       	ldd	r19, Y+11	; 0x0b
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	31 05       	cpc	r19, r1
 13a:	b1 f0       	breq	.+44     	; 0x168 <MDIO_voidSetPinDirection+0xa6>
 13c:	d0 c0       	rjmp	.+416    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					{
					case DIO_INPUT : CLR_BIT(DDRA_REG,A_u8PinId); break;
 13e:	aa e3       	ldi	r26, 0x3A	; 58
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	ea e3       	ldi	r30, 0x3A	; 58
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <MDIO_voidSetPinDirection+0x9a>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <MDIO_voidSetPinDirection+0x96>
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	8c 93       	st	X, r24
 166:	bb c0       	rjmp	.+374    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					case DIO_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId); break;
 168:	aa e3       	ldi	r26, 0x3A	; 58
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	ea e3       	ldi	r30, 0x3A	; 58
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <MDIO_voidSetPinDirection+0xc4>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <MDIO_voidSetPinDirection+0xc0>
 18a:	84 2b       	or	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	a7 c0       	rjmp	.+334    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					}
					break;
	case DIO_PORTB:
					switch (A_u8Direction)
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	39 87       	std	Y+9, r19	; 0x09
 198:	28 87       	std	Y+8, r18	; 0x08
 19a:	88 85       	ldd	r24, Y+8	; 0x08
 19c:	99 85       	ldd	r25, Y+9	; 0x09
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	31 f0       	breq	.+12     	; 0x1ae <MDIO_voidSetPinDirection+0xec>
 1a2:	28 85       	ldd	r18, Y+8	; 0x08
 1a4:	39 85       	ldd	r19, Y+9	; 0x09
 1a6:	21 30       	cpi	r18, 0x01	; 1
 1a8:	31 05       	cpc	r19, r1
 1aa:	b1 f0       	breq	.+44     	; 0x1d8 <MDIO_voidSetPinDirection+0x116>
 1ac:	98 c0       	rjmp	.+304    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					{
					case DIO_INPUT : CLR_BIT(DDRB_REG,A_u8PinId); break;
 1ae:	a7 e3       	ldi	r26, 0x37	; 55
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e7 e3       	ldi	r30, 0x37	; 55
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <MDIO_voidSetPinDirection+0x10a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <MDIO_voidSetPinDirection+0x106>
 1d0:	80 95       	com	r24
 1d2:	84 23       	and	r24, r20
 1d4:	8c 93       	st	X, r24
 1d6:	83 c0       	rjmp	.+262    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					case DIO_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId); break;
 1d8:	a7 e3       	ldi	r26, 0x37	; 55
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e7 e3       	ldi	r30, 0x37	; 55
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <MDIO_voidSetPinDirection+0x134>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <MDIO_voidSetPinDirection+0x130>
 1fa:	84 2b       	or	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	6f c0       	rjmp	.+222    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					}
					break;
	case DIO_PORTC:
					switch (A_u8Direction)
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	3f 83       	std	Y+7, r19	; 0x07
 208:	2e 83       	std	Y+6, r18	; 0x06
 20a:	8e 81       	ldd	r24, Y+6	; 0x06
 20c:	9f 81       	ldd	r25, Y+7	; 0x07
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	31 f0       	breq	.+12     	; 0x21e <MDIO_voidSetPinDirection+0x15c>
 212:	2e 81       	ldd	r18, Y+6	; 0x06
 214:	3f 81       	ldd	r19, Y+7	; 0x07
 216:	21 30       	cpi	r18, 0x01	; 1
 218:	31 05       	cpc	r19, r1
 21a:	b1 f0       	breq	.+44     	; 0x248 <MDIO_voidSetPinDirection+0x186>
 21c:	60 c0       	rjmp	.+192    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					{
					case DIO_INPUT : CLR_BIT(DDRC_REG,A_u8PinId); break;
 21e:	a4 e3       	ldi	r26, 0x34	; 52
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_voidSetPinDirection+0x17a>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_voidSetPinDirection+0x176>
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	8c 93       	st	X, r24
 246:	4b c0       	rjmp	.+150    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					case DIO_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId); break;
 248:	a4 e3       	ldi	r26, 0x34	; 52
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e4 e3       	ldi	r30, 0x34	; 52
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	48 2f       	mov	r20, r24
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 2e       	mov	r0, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <MDIO_voidSetPinDirection+0x1a4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <MDIO_voidSetPinDirection+0x1a0>
 26a:	84 2b       	or	r24, r20
 26c:	8c 93       	st	X, r24
 26e:	37 c0       	rjmp	.+110    	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					}
					break;
	case DIO_PORTD:
					switch (A_u8Direction)
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	3d 83       	std	Y+5, r19	; 0x05
 278:	2c 83       	std	Y+4, r18	; 0x04
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	9d 81       	ldd	r25, Y+5	; 0x05
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	31 f0       	breq	.+12     	; 0x28e <MDIO_voidSetPinDirection+0x1cc>
 282:	2c 81       	ldd	r18, Y+4	; 0x04
 284:	3d 81       	ldd	r19, Y+5	; 0x05
 286:	21 30       	cpi	r18, 0x01	; 1
 288:	31 05       	cpc	r19, r1
 28a:	b1 f0       	breq	.+44     	; 0x2b8 <MDIO_voidSetPinDirection+0x1f6>
 28c:	28 c0       	rjmp	.+80     	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					{
					case DIO_INPUT : CLR_BIT(DDRD_REG,A_u8PinId); break;
 28e:	a1 e3       	ldi	r26, 0x31	; 49
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	e1 e3       	ldi	r30, 0x31	; 49
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MDIO_voidSetPinDirection+0x1ea>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <MDIO_voidSetPinDirection+0x1e6>
 2b0:	80 95       	com	r24
 2b2:	84 23       	and	r24, r20
 2b4:	8c 93       	st	X, r24
 2b6:	13 c0       	rjmp	.+38     	; 0x2de <MDIO_voidSetPinDirection+0x21c>
					case DIO_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId); break;
 2b8:	a1 e3       	ldi	r26, 0x31	; 49
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	e1 e3       	ldi	r30, 0x31	; 49
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	48 2f       	mov	r20, r24
 2c4:	8a 81       	ldd	r24, Y+2	; 0x02
 2c6:	28 2f       	mov	r18, r24
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	02 2e       	mov	r0, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <MDIO_voidSetPinDirection+0x214>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <MDIO_voidSetPinDirection+0x210>
 2da:	84 2b       	or	r24, r20
 2dc:	8c 93       	st	X, r24
					}
					break;
	}
}
 2de:	2d 96       	adiw	r28, 0x0d	; 13
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	08 95       	ret

000002f0 <MDIO_voidSetPinValue>:
/* A_u8PinId    : PIN0 ... PIN7                             			      */
/* A_u8Value    : DIO_HIGH - DIO_LOW - DIO_PULLUP               			  */
/******************************************************************************/

void MDIO_voidSetPinValue (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	2d 97       	sbiw	r28, 0x0d	; 13
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	6a 83       	std	Y+2, r22	; 0x02
 308:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId)
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	3d 87       	std	Y+13, r19	; 0x0d
 312:	2c 87       	std	Y+12, r18	; 0x0c
 314:	8c 85       	ldd	r24, Y+12	; 0x0c
 316:	9d 85       	ldd	r25, Y+13	; 0x0d
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	91 05       	cpc	r25, r1
 31c:	09 f4       	brne	.+2      	; 0x320 <MDIO_voidSetPinValue+0x30>
 31e:	4f c0       	rjmp	.+158    	; 0x3be <MDIO_voidSetPinValue+0xce>
 320:	2c 85       	ldd	r18, Y+12	; 0x0c
 322:	3d 85       	ldd	r19, Y+13	; 0x0d
 324:	22 30       	cpi	r18, 0x02	; 2
 326:	31 05       	cpc	r19, r1
 328:	2c f4       	brge	.+10     	; 0x334 <MDIO_voidSetPinValue+0x44>
 32a:	8c 85       	ldd	r24, Y+12	; 0x0c
 32c:	9d 85       	ldd	r25, Y+13	; 0x0d
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	71 f0       	breq	.+28     	; 0x34e <MDIO_voidSetPinValue+0x5e>
 332:	eb c0       	rjmp	.+470    	; 0x50a <MDIO_voidSetPinValue+0x21a>
 334:	2c 85       	ldd	r18, Y+12	; 0x0c
 336:	3d 85       	ldd	r19, Y+13	; 0x0d
 338:	22 30       	cpi	r18, 0x02	; 2
 33a:	31 05       	cpc	r19, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <MDIO_voidSetPinValue+0x50>
 33e:	77 c0       	rjmp	.+238    	; 0x42e <MDIO_voidSetPinValue+0x13e>
 340:	8c 85       	ldd	r24, Y+12	; 0x0c
 342:	9d 85       	ldd	r25, Y+13	; 0x0d
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	91 05       	cpc	r25, r1
 348:	09 f4       	brne	.+2      	; 0x34c <MDIO_voidSetPinValue+0x5c>
 34a:	a9 c0       	rjmp	.+338    	; 0x49e <MDIO_voidSetPinValue+0x1ae>
 34c:	de c0       	rjmp	.+444    	; 0x50a <MDIO_voidSetPinValue+0x21a>
	{
	case DIO_PORTA:
			switch (A_u8Value)
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	3b 87       	std	Y+11, r19	; 0x0b
 356:	2a 87       	std	Y+10, r18	; 0x0a
 358:	8a 85       	ldd	r24, Y+10	; 0x0a
 35a:	9b 85       	ldd	r25, Y+11	; 0x0b
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	d1 f0       	breq	.+52     	; 0x394 <MDIO_voidSetPinValue+0xa4>
 360:	2a 85       	ldd	r18, Y+10	; 0x0a
 362:	3b 85       	ldd	r19, Y+11	; 0x0b
 364:	21 30       	cpi	r18, 0x01	; 1
 366:	31 05       	cpc	r19, r1
 368:	09 f0       	breq	.+2      	; 0x36c <MDIO_voidSetPinValue+0x7c>
 36a:	cf c0       	rjmp	.+414    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case DIO_HIGH: SET_BIT(PORTA_REG,A_u8PinId); break;
 36c:	ab e3       	ldi	r26, 0x3B	; 59
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	eb e3       	ldi	r30, 0x3B	; 59
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <MDIO_voidSetPinValue+0x9a>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <MDIO_voidSetPinValue+0x96>
 38e:	84 2b       	or	r24, r20
 390:	8c 93       	st	X, r24
 392:	bb c0       	rjmp	.+374    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			case DIO_LOW : CLR_BIT(PORTA_REG,A_u8PinId); break;
 394:	ab e3       	ldi	r26, 0x3B	; 59
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	eb e3       	ldi	r30, 0x3B	; 59
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	48 2f       	mov	r20, r24
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	28 2f       	mov	r18, r24
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 2e       	mov	r0, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <MDIO_voidSetPinValue+0xc2>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <MDIO_voidSetPinValue+0xbe>
 3b6:	80 95       	com	r24
 3b8:	84 23       	and	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	a6 c0       	rjmp	.+332    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			}
			break;
	case DIO_PORTB:
			switch (A_u8Value)
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	39 87       	std	Y+9, r19	; 0x09
 3c6:	28 87       	std	Y+8, r18	; 0x08
 3c8:	88 85       	ldd	r24, Y+8	; 0x08
 3ca:	99 85       	ldd	r25, Y+9	; 0x09
 3cc:	00 97       	sbiw	r24, 0x00	; 0
 3ce:	d1 f0       	breq	.+52     	; 0x404 <MDIO_voidSetPinValue+0x114>
 3d0:	28 85       	ldd	r18, Y+8	; 0x08
 3d2:	39 85       	ldd	r19, Y+9	; 0x09
 3d4:	21 30       	cpi	r18, 0x01	; 1
 3d6:	31 05       	cpc	r19, r1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <MDIO_voidSetPinValue+0xec>
 3da:	97 c0       	rjmp	.+302    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case DIO_HIGH: SET_BIT(PORTB_REG,A_u8PinId); break;
 3dc:	a8 e3       	ldi	r26, 0x38	; 56
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e8 e3       	ldi	r30, 0x38	; 56
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <MDIO_voidSetPinValue+0x10a>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <MDIO_voidSetPinValue+0x106>
 3fe:	84 2b       	or	r24, r20
 400:	8c 93       	st	X, r24
 402:	83 c0       	rjmp	.+262    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			case DIO_LOW : CLR_BIT(PORTB_REG,A_u8PinId); break;
 404:	a8 e3       	ldi	r26, 0x38	; 56
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e3       	ldi	r30, 0x38	; 56
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <MDIO_voidSetPinValue+0x132>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <MDIO_voidSetPinValue+0x12e>
 426:	80 95       	com	r24
 428:	84 23       	and	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	6e c0       	rjmp	.+220    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			}
			break;
	case DIO_PORTC:
			switch (A_u8Value)
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	3f 83       	std	Y+7, r19	; 0x07
 436:	2e 83       	std	Y+6, r18	; 0x06
 438:	8e 81       	ldd	r24, Y+6	; 0x06
 43a:	9f 81       	ldd	r25, Y+7	; 0x07
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	d1 f0       	breq	.+52     	; 0x474 <MDIO_voidSetPinValue+0x184>
 440:	2e 81       	ldd	r18, Y+6	; 0x06
 442:	3f 81       	ldd	r19, Y+7	; 0x07
 444:	21 30       	cpi	r18, 0x01	; 1
 446:	31 05       	cpc	r19, r1
 448:	09 f0       	breq	.+2      	; 0x44c <MDIO_voidSetPinValue+0x15c>
 44a:	5f c0       	rjmp	.+190    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case DIO_HIGH: SET_BIT(PORTC_REG,A_u8PinId); break;
 44c:	a5 e3       	ldi	r26, 0x35	; 53
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	e5 e3       	ldi	r30, 0x35	; 53
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <MDIO_voidSetPinValue+0x17a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <MDIO_voidSetPinValue+0x176>
 46e:	84 2b       	or	r24, r20
 470:	8c 93       	st	X, r24
 472:	4b c0       	rjmp	.+150    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			case DIO_LOW : CLR_BIT(PORTC_REG,A_u8PinId); break;
 474:	a5 e3       	ldi	r26, 0x35	; 53
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e5 e3       	ldi	r30, 0x35	; 53
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <MDIO_voidSetPinValue+0x1a2>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <MDIO_voidSetPinValue+0x19e>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
 49c:	36 c0       	rjmp	.+108    	; 0x50a <MDIO_voidSetPinValue+0x21a>
			}
			break;
	case DIO_PORTD:
			switch (A_u8Value)
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3d 83       	std	Y+5, r19	; 0x05
 4a6:	2c 83       	std	Y+4, r18	; 0x04
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	9d 81       	ldd	r25, Y+5	; 0x05
 4ac:	00 97       	sbiw	r24, 0x00	; 0
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <MDIO_voidSetPinValue+0x1f2>
 4b0:	2c 81       	ldd	r18, Y+4	; 0x04
 4b2:	3d 81       	ldd	r19, Y+5	; 0x05
 4b4:	21 30       	cpi	r18, 0x01	; 1
 4b6:	31 05       	cpc	r19, r1
 4b8:	41 f5       	brne	.+80     	; 0x50a <MDIO_voidSetPinValue+0x21a>
			{
			case DIO_HIGH: SET_BIT(PORTD_REG,A_u8PinId); break;
 4ba:	a2 e3       	ldi	r26, 0x32	; 50
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e2 e3       	ldi	r30, 0x32	; 50
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <MDIO_voidSetPinValue+0x1e8>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <MDIO_voidSetPinValue+0x1e4>
 4dc:	84 2b       	or	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <MDIO_voidSetPinValue+0x21a>
			case DIO_LOW : CLR_BIT(PORTD_REG,A_u8PinId); break;
 4e2:	a2 e3       	ldi	r26, 0x32	; 50
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e2 e3       	ldi	r30, 0x32	; 50
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <MDIO_voidSetPinValue+0x210>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <MDIO_voidSetPinValue+0x20c>
 504:	80 95       	com	r24
 506:	84 23       	and	r24, r20
 508:	8c 93       	st	X, r24
			}
			break;
	}
}
 50a:	2d 96       	adiw	r28, 0x0d	; 13
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
 516:	cf 91       	pop	r28
 518:	df 91       	pop	r29
 51a:	08 95       	ret

0000051c <MDIO_voidSetPortDirection>:
/* Options																	  */
/* A_u8PortId   : DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD    			  */
/* A_u8Direction: Set the Direction in hex format 						  	  */
/******************************************************************************/
void MDIO_voidSetPortDirection (u8 A_u8PortId,u8 A_u8Direction)
{
 51c:	df 93       	push	r29
 51e:	cf 93       	push	r28
 520:	00 d0       	rcall	.+0      	; 0x522 <MDIO_voidSetPortDirection+0x6>
 522:	00 d0       	rcall	.+0      	; 0x524 <MDIO_voidSetPortDirection+0x8>
 524:	cd b7       	in	r28, 0x3d	; 61
 526:	de b7       	in	r29, 0x3e	; 62
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	28 2f       	mov	r18, r24
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	3c 83       	std	Y+4, r19	; 0x04
 534:	2b 83       	std	Y+3, r18	; 0x03
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 05       	cpc	r25, r1
 53e:	d1 f0       	breq	.+52     	; 0x574 <MDIO_voidSetPortDirection+0x58>
 540:	2b 81       	ldd	r18, Y+3	; 0x03
 542:	3c 81       	ldd	r19, Y+4	; 0x04
 544:	22 30       	cpi	r18, 0x02	; 2
 546:	31 05       	cpc	r19, r1
 548:	2c f4       	brge	.+10     	; 0x554 <MDIO_voidSetPortDirection+0x38>
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	9c 81       	ldd	r25, Y+4	; 0x04
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	61 f0       	breq	.+24     	; 0x56a <MDIO_voidSetPortDirection+0x4e>
 552:	1e c0       	rjmp	.+60     	; 0x590 <MDIO_voidSetPortDirection+0x74>
 554:	2b 81       	ldd	r18, Y+3	; 0x03
 556:	3c 81       	ldd	r19, Y+4	; 0x04
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	81 f0       	breq	.+32     	; 0x57e <MDIO_voidSetPortDirection+0x62>
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	91 05       	cpc	r25, r1
 566:	81 f0       	breq	.+32     	; 0x588 <MDIO_voidSetPortDirection+0x6c>
 568:	13 c0       	rjmp	.+38     	; 0x590 <MDIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA: DDRA_REG=A_u8Direction; break;
 56a:	ea e3       	ldi	r30, 0x3A	; 58
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	80 83       	st	Z, r24
 572:	0e c0       	rjmp	.+28     	; 0x590 <MDIO_voidSetPortDirection+0x74>
	case DIO_PORTB: DDRB_REG=A_u8Direction; break;
 574:	e7 e3       	ldi	r30, 0x37	; 55
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	80 83       	st	Z, r24
 57c:	09 c0       	rjmp	.+18     	; 0x590 <MDIO_voidSetPortDirection+0x74>
	case DIO_PORTC: DDRC_REG=A_u8Direction; break;
 57e:	e4 e3       	ldi	r30, 0x34	; 52
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	80 83       	st	Z, r24
 586:	04 c0       	rjmp	.+8      	; 0x590 <MDIO_voidSetPortDirection+0x74>
	case DIO_PORTD: DDRD_REG=A_u8Direction; break;
 588:	e1 e3       	ldi	r30, 0x31	; 49
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	80 83       	st	Z, r24
	}
}
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	cf 91       	pop	r28
 59a:	df 91       	pop	r29
 59c:	08 95       	ret

0000059e <MDIO_voidSetPortValue>:
/* Options																	  */
/* A_u8PortId   : DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD    			  */
/* A_u8Value: Set the Direction in hex format 					  		  	  */
/******************************************************************************/
void MDIO_voidSetPortValue (u8 A_u8PortId,u8 A_u8Value)
{
 59e:	df 93       	push	r29
 5a0:	cf 93       	push	r28
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <MDIO_voidSetPortValue+0x6>
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <MDIO_voidSetPortValue+0x8>
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	28 2f       	mov	r18, r24
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	3c 83       	std	Y+4, r19	; 0x04
 5b6:	2b 83       	std	Y+3, r18	; 0x03
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	9c 81       	ldd	r25, Y+4	; 0x04
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	91 05       	cpc	r25, r1
 5c0:	d1 f0       	breq	.+52     	; 0x5f6 <MDIO_voidSetPortValue+0x58>
 5c2:	2b 81       	ldd	r18, Y+3	; 0x03
 5c4:	3c 81       	ldd	r19, Y+4	; 0x04
 5c6:	22 30       	cpi	r18, 0x02	; 2
 5c8:	31 05       	cpc	r19, r1
 5ca:	2c f4       	brge	.+10     	; 0x5d6 <MDIO_voidSetPortValue+0x38>
 5cc:	8b 81       	ldd	r24, Y+3	; 0x03
 5ce:	9c 81       	ldd	r25, Y+4	; 0x04
 5d0:	00 97       	sbiw	r24, 0x00	; 0
 5d2:	61 f0       	breq	.+24     	; 0x5ec <MDIO_voidSetPortValue+0x4e>
 5d4:	1e c0       	rjmp	.+60     	; 0x612 <MDIO_voidSetPortValue+0x74>
 5d6:	2b 81       	ldd	r18, Y+3	; 0x03
 5d8:	3c 81       	ldd	r19, Y+4	; 0x04
 5da:	22 30       	cpi	r18, 0x02	; 2
 5dc:	31 05       	cpc	r19, r1
 5de:	81 f0       	breq	.+32     	; 0x600 <MDIO_voidSetPortValue+0x62>
 5e0:	8b 81       	ldd	r24, Y+3	; 0x03
 5e2:	9c 81       	ldd	r25, Y+4	; 0x04
 5e4:	83 30       	cpi	r24, 0x03	; 3
 5e6:	91 05       	cpc	r25, r1
 5e8:	81 f0       	breq	.+32     	; 0x60a <MDIO_voidSetPortValue+0x6c>
 5ea:	13 c0       	rjmp	.+38     	; 0x612 <MDIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA: PORTA_REG=A_u8Value; break;
 5ec:	eb e3       	ldi	r30, 0x3B	; 59
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	80 83       	st	Z, r24
 5f4:	0e c0       	rjmp	.+28     	; 0x612 <MDIO_voidSetPortValue+0x74>
	case DIO_PORTB: PORTB_REG=A_u8Value; break;
 5f6:	e8 e3       	ldi	r30, 0x38	; 56
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	80 83       	st	Z, r24
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <MDIO_voidSetPortValue+0x74>
	case DIO_PORTC: PORTC_REG=A_u8Value; break;
 600:	e5 e3       	ldi	r30, 0x35	; 53
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	80 83       	st	Z, r24
 608:	04 c0       	rjmp	.+8      	; 0x612 <MDIO_voidSetPortValue+0x74>
	case DIO_PORTD: PORTD_REG=A_u8Value; break;
 60a:	e2 e3       	ldi	r30, 0x32	; 50
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	80 83       	st	Z, r24
	}
}
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	cf 91       	pop	r28
 61c:	df 91       	pop	r29
 61e:	08 95       	ret

00000620 <MDIO_u8GetPinValue>:
/* Options																	  */
/* A_u8PortId   : DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD    			  */
/* A_u8PinId    : PIN0 ... PIN7                             			      */
/******************************************************************************/
u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
 620:	df 93       	push	r29
 622:	cf 93       	push	r28
 624:	00 d0       	rcall	.+0      	; 0x626 <MDIO_u8GetPinValue+0x6>
 626:	00 d0       	rcall	.+0      	; 0x628 <MDIO_u8GetPinValue+0x8>
 628:	0f 92       	push	r0
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	8a 83       	std	Y+2, r24	; 0x02
 630:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=255;
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortId)
 636:	8a 81       	ldd	r24, Y+2	; 0x02
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	3d 83       	std	Y+5, r19	; 0x05
 63e:	2c 83       	std	Y+4, r18	; 0x04
 640:	4c 81       	ldd	r20, Y+4	; 0x04
 642:	5d 81       	ldd	r21, Y+5	; 0x05
 644:	41 30       	cpi	r20, 0x01	; 1
 646:	51 05       	cpc	r21, r1
 648:	41 f1       	breq	.+80     	; 0x69a <MDIO_u8GetPinValue+0x7a>
 64a:	8c 81       	ldd	r24, Y+4	; 0x04
 64c:	9d 81       	ldd	r25, Y+5	; 0x05
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	91 05       	cpc	r25, r1
 652:	34 f4       	brge	.+12     	; 0x660 <MDIO_u8GetPinValue+0x40>
 654:	2c 81       	ldd	r18, Y+4	; 0x04
 656:	3d 81       	ldd	r19, Y+5	; 0x05
 658:	21 15       	cp	r18, r1
 65a:	31 05       	cpc	r19, r1
 65c:	61 f0       	breq	.+24     	; 0x676 <MDIO_u8GetPinValue+0x56>
 65e:	52 c0       	rjmp	.+164    	; 0x704 <MDIO_u8GetPinValue+0xe4>
 660:	4c 81       	ldd	r20, Y+4	; 0x04
 662:	5d 81       	ldd	r21, Y+5	; 0x05
 664:	42 30       	cpi	r20, 0x02	; 2
 666:	51 05       	cpc	r21, r1
 668:	51 f1       	breq	.+84     	; 0x6be <MDIO_u8GetPinValue+0x9e>
 66a:	8c 81       	ldd	r24, Y+4	; 0x04
 66c:	9d 81       	ldd	r25, Y+5	; 0x05
 66e:	83 30       	cpi	r24, 0x03	; 3
 670:	91 05       	cpc	r25, r1
 672:	b9 f1       	breq	.+110    	; 0x6e2 <MDIO_u8GetPinValue+0xc2>
 674:	47 c0       	rjmp	.+142    	; 0x704 <MDIO_u8GetPinValue+0xe4>
	{
	case DIO_PORTA: local_u8PinValue = GET_BIT(PINA_REG,A_u8PinId); break;
 676:	e9 e3       	ldi	r30, 0x39	; 57
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	a9 01       	movw	r20, r18
 688:	02 c0       	rjmp	.+4      	; 0x68e <MDIO_u8GetPinValue+0x6e>
 68a:	55 95       	asr	r21
 68c:	47 95       	ror	r20
 68e:	8a 95       	dec	r24
 690:	e2 f7       	brpl	.-8      	; 0x68a <MDIO_u8GetPinValue+0x6a>
 692:	ca 01       	movw	r24, r20
 694:	81 70       	andi	r24, 0x01	; 1
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	35 c0       	rjmp	.+106    	; 0x704 <MDIO_u8GetPinValue+0xe4>
	case DIO_PORTB: local_u8PinValue = GET_BIT(PINB_REG,A_u8PinId); break;
 69a:	e6 e3       	ldi	r30, 0x36	; 54
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	a9 01       	movw	r20, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <MDIO_u8GetPinValue+0x92>
 6ae:	55 95       	asr	r21
 6b0:	47 95       	ror	r20
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <MDIO_u8GetPinValue+0x8e>
 6b6:	ca 01       	movw	r24, r20
 6b8:	81 70       	andi	r24, 0x01	; 1
 6ba:	89 83       	std	Y+1, r24	; 0x01
 6bc:	23 c0       	rjmp	.+70     	; 0x704 <MDIO_u8GetPinValue+0xe4>
	case DIO_PORTC: local_u8PinValue = GET_BIT(PINC_REG,A_u8PinId); break;
 6be:	e3 e3       	ldi	r30, 0x33	; 51
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	a9 01       	movw	r20, r18
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <MDIO_u8GetPinValue+0xb6>
 6d2:	55 95       	asr	r21
 6d4:	47 95       	ror	r20
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <MDIO_u8GetPinValue+0xb2>
 6da:	ca 01       	movw	r24, r20
 6dc:	81 70       	andi	r24, 0x01	; 1
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <MDIO_u8GetPinValue+0xe4>
	case DIO_PORTD: local_u8PinValue = GET_BIT(PIND_REG,A_u8PinId); break;
 6e2:	e0 e3       	ldi	r30, 0x30	; 48
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	28 2f       	mov	r18, r24
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	88 2f       	mov	r24, r24
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	a9 01       	movw	r20, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <MDIO_u8GetPinValue+0xda>
 6f6:	55 95       	asr	r21
 6f8:	47 95       	ror	r20
 6fa:	8a 95       	dec	r24
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <MDIO_u8GetPinValue+0xd6>
 6fe:	ca 01       	movw	r24, r20
 700:	81 70       	andi	r24, 0x01	; 1
 702:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8PinValue;
 704:	89 81       	ldd	r24, Y+1	; 0x01
}
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <MDIO_voidTogglePinValue>:
/* Options																	  */
/* A_u8PortId   : DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD    			  */
/* A_u8PinId    : PIN0 ... PIN7                             			      */
/******************************************************************************/
void MDIO_voidTogglePinValue (u8 A_u8PortId, u8 A_u8PinId)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	00 d0       	rcall	.+0      	; 0x71c <MDIO_voidTogglePinValue+0x6>
 71c:	00 d0       	rcall	.+0      	; 0x71e <MDIO_voidTogglePinValue+0x8>
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	3c 83       	std	Y+4, r19	; 0x04
 72e:	2b 83       	std	Y+3, r18	; 0x03
 730:	8b 81       	ldd	r24, Y+3	; 0x03
 732:	9c 81       	ldd	r25, Y+4	; 0x04
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	91 05       	cpc	r25, r1
 738:	49 f1       	breq	.+82     	; 0x78c <MDIO_voidTogglePinValue+0x76>
 73a:	2b 81       	ldd	r18, Y+3	; 0x03
 73c:	3c 81       	ldd	r19, Y+4	; 0x04
 73e:	22 30       	cpi	r18, 0x02	; 2
 740:	31 05       	cpc	r19, r1
 742:	2c f4       	brge	.+10     	; 0x74e <MDIO_voidTogglePinValue+0x38>
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	9c 81       	ldd	r25, Y+4	; 0x04
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	61 f0       	breq	.+24     	; 0x764 <MDIO_voidTogglePinValue+0x4e>
 74c:	5a c0       	rjmp	.+180    	; 0x802 <MDIO_voidTogglePinValue+0xec>
 74e:	2b 81       	ldd	r18, Y+3	; 0x03
 750:	3c 81       	ldd	r19, Y+4	; 0x04
 752:	22 30       	cpi	r18, 0x02	; 2
 754:	31 05       	cpc	r19, r1
 756:	71 f1       	breq	.+92     	; 0x7b4 <MDIO_voidTogglePinValue+0x9e>
 758:	8b 81       	ldd	r24, Y+3	; 0x03
 75a:	9c 81       	ldd	r25, Y+4	; 0x04
 75c:	83 30       	cpi	r24, 0x03	; 3
 75e:	91 05       	cpc	r25, r1
 760:	e9 f1       	breq	.+122    	; 0x7dc <MDIO_voidTogglePinValue+0xc6>
 762:	4f c0       	rjmp	.+158    	; 0x802 <MDIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOGGLE_BIT(PORTA_REG,A_u8PinId); break;
 764:	ab e3       	ldi	r26, 0x3B	; 59
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	eb e3       	ldi	r30, 0x3B	; 59
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	80 81       	ld	r24, Z
 76e:	48 2f       	mov	r20, r24
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	28 2f       	mov	r18, r24
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	02 2e       	mov	r0, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <MDIO_voidTogglePinValue+0x6c>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <MDIO_voidTogglePinValue+0x68>
 786:	84 27       	eor	r24, r20
 788:	8c 93       	st	X, r24
 78a:	3b c0       	rjmp	.+118    	; 0x802 <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOGGLE_BIT(PORTB_REG,A_u8PinId); break;
 78c:	a8 e3       	ldi	r26, 0x38	; 56
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	e8 e3       	ldi	r30, 0x38	; 56
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	48 2f       	mov	r20, r24
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 2e       	mov	r0, r18
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <MDIO_voidTogglePinValue+0x94>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	0a 94       	dec	r0
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <MDIO_voidTogglePinValue+0x90>
 7ae:	84 27       	eor	r24, r20
 7b0:	8c 93       	st	X, r24
 7b2:	27 c0       	rjmp	.+78     	; 0x802 <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOGGLE_BIT(PORTC_REG,A_u8PinId); break;
 7b4:	a5 e3       	ldi	r26, 0x35	; 53
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e5 e3       	ldi	r30, 0x35	; 53
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	48 2f       	mov	r20, r24
 7c0:	8a 81       	ldd	r24, Y+2	; 0x02
 7c2:	28 2f       	mov	r18, r24
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 2e       	mov	r0, r18
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <MDIO_voidTogglePinValue+0xbc>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	0a 94       	dec	r0
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <MDIO_voidTogglePinValue+0xb8>
 7d6:	84 27       	eor	r24, r20
 7d8:	8c 93       	st	X, r24
 7da:	13 c0       	rjmp	.+38     	; 0x802 <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOGGLE_BIT(PORTD_REG,A_u8PinId); break;
 7dc:	a2 e3       	ldi	r26, 0x32	; 50
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e2 e3       	ldi	r30, 0x32	; 50
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	48 2f       	mov	r20, r24
 7e8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ea:	28 2f       	mov	r18, r24
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 2e       	mov	r0, r18
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <MDIO_voidTogglePinValue+0xe4>
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	0a 94       	dec	r0
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <MDIO_voidTogglePinValue+0xe0>
 7fe:	84 27       	eor	r24, r20
 800:	8c 93       	st	X, r24
	}
}
 802:	0f 90       	pop	r0
 804:	0f 90       	pop	r0
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	cf 91       	pop	r28
 80c:	df 91       	pop	r29
 80e:	08 95       	ret

00000810 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_configuration.h"


void MGI_voidEnable (void)
{
 810:	df 93       	push	r29
 812:	cf 93       	push	r28
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 818:	af e5       	ldi	r26, 0x5F	; 95
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	ef e5       	ldi	r30, 0x5F	; 95
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	80 81       	ld	r24, Z
 822:	80 68       	ori	r24, 0x80	; 128
 824:	8c 93       	st	X, r24
}
 826:	cf 91       	pop	r28
 828:	df 91       	pop	r29
 82a:	08 95       	ret

0000082c <MGI_voidDisable>:
void MGI_voidDisable (void)
{
 82c:	df 93       	push	r29
 82e:	cf 93       	push	r28
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
 834:	af e5       	ldi	r26, 0x5F	; 95
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	ef e5       	ldi	r30, 0x5F	; 95
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	8f 77       	andi	r24, 0x7F	; 127
 840:	8c 93       	st	X, r24
}
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <HLED_voidTurnOn>:
#include "../Include/HAL/LED/LED_interface.h"
#include "../Include/HAL/LED/LED_private.h"
#include "../Include/HAL/LED/LED_configurations.h"

void HLED_voidTurnOn(u8 A_u8PortID, u8 A_u8PinId)
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	00 d0       	rcall	.+0      	; 0x84e <HLED_voidTurnOn+0x6>
 84e:	cd b7       	in	r28, 0x3d	; 61
 850:	de b7       	in	r29, 0x3e	; 62
 852:	89 83       	std	Y+1, r24	; 0x01
 854:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_ON);
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	6a 81       	ldd	r22, Y+2	; 0x02
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
}
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	cf 91       	pop	r28
 866:	df 91       	pop	r29
 868:	08 95       	ret

0000086a <HLED_voidTurnOff>:
void HLED_voidTurnOff(u8 A_u8PortID, u8 A_u8PinId)
{
 86a:	df 93       	push	r29
 86c:	cf 93       	push	r28
 86e:	00 d0       	rcall	.+0      	; 0x870 <HLED_voidTurnOff+0x6>
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
 874:	89 83       	std	Y+1, r24	; 0x01
 876:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_OFF);
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	6a 81       	ldd	r22, Y+2	; 0x02
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
}
 882:	0f 90       	pop	r0
 884:	0f 90       	pop	r0
 886:	cf 91       	pop	r28
 888:	df 91       	pop	r29
 88a:	08 95       	ret

0000088c <HLED_voidSetLedStatus>:

// LED_ON - LED_OFF
void HLED_voidSetLedStatus(u8 A_u8PortID, u8 A_u8PinId, u8 A_u8LedStatus)
{
 88c:	df 93       	push	r29
 88e:	cf 93       	push	r28
 890:	00 d0       	rcall	.+0      	; 0x892 <HLED_voidSetLedStatus+0x6>
 892:	0f 92       	push	r0
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	89 83       	std	Y+1, r24	; 0x01
 89a:	6a 83       	std	Y+2, r22	; 0x02
 89c:	4b 83       	std	Y+3, r20	; 0x03
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, A_u8LedStatus);
 89e:	89 81       	ldd	r24, Y+1	; 0x01
 8a0:	6a 81       	ldd	r22, Y+2	; 0x02
 8a2:	4b 81       	ldd	r20, Y+3	; 0x03
 8a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <MDIO_voidSetPinValue>
}
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	cf 91       	pop	r28
 8b0:	df 91       	pop	r29
 8b2:	08 95       	ret

000008b4 <HLED_voidToggleLed>:

void HLED_voidToggleLed(u8 A_u8PortID, u8 A_u8PinId)
{
 8b4:	df 93       	push	r29
 8b6:	cf 93       	push	r28
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <HLED_voidToggleLed+0x6>
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	89 83       	std	Y+1, r24	; 0x01
 8c0:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_u8PortID, A_u8PinId)	;
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	6a 81       	ldd	r22, Y+2	; 0x02
 8c6:	0e 94 8b 03 	call	0x716	; 0x716 <MDIO_voidTogglePinValue>
}
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	cf 91       	pop	r28
 8d0:	df 91       	pop	r29
 8d2:	08 95       	ret

000008d4 <RTO_voidInit>:

#define NULL ((void *)0)
RTO_TCB  RTO_AstrTasks [RTO_u8_MAX_NUMBER_TASKS];

void RTO_voidInit(void)
{
 8d4:	df 93       	push	r29
 8d6:	cf 93       	push	r28
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
	// set scheduler as call back function to be called after Tick time
	MTIMER0_voidsetCallBackCTC(&RTO_voidScheduler);
 8dc:	8d ee       	ldi	r24, 0xED	; 237
 8de:	94 e0       	ldi	r25, 0x04	; 4
 8e0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <MTIMER0_voidsetCallBackCTC>
	//start OS by starting Timer
	MTIMER0_voidInit();
 8e4:	0e 94 74 05 	call	0xae8	; 0xae8 <MTIMER0_voidInit>
}
 8e8:	cf 91       	pop	r28
 8ea:	df 91       	pop	r29
 8ec:	08 95       	ret

000008ee <RTO_voidInitArrayFunctions>:

void RTO_voidInitArrayFunctions(void)
{
 8ee:	df 93       	push	r29
 8f0:	cf 93       	push	r28
 8f2:	0f 92       	push	r0
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Counter=0;
 8f8:	19 82       	std	Y+1, r1	; 0x01
	for (local_u8Counter=0; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS; local_u8Counter++)
 8fa:	19 82       	std	Y+1, r1	; 0x01
 8fc:	12 c0       	rjmp	.+36     	; 0x922 <RTO_voidInitArrayFunctions+0x34>
		{
			RTO_AstrTasks[local_u8Counter].pf=NULL;
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	28 2f       	mov	r18, r24
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	c9 01       	movw	r24, r18
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	82 0f       	add	r24, r18
 90c:	93 1f       	adc	r25, r19
 90e:	88 0f       	add	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	fc 01       	movw	r30, r24
 914:	e7 59       	subi	r30, 0x97	; 151
 916:	ff 4f       	sbci	r31, 0xFF	; 255
 918:	11 82       	std	Z+1, r1	; 0x01
 91a:	10 82       	st	Z, r1
}

void RTO_voidInitArrayFunctions(void)
{
	u8 local_u8Counter=0;
	for (local_u8Counter=0; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS; local_u8Counter++)
 91c:	89 81       	ldd	r24, Y+1	; 0x01
 91e:	8f 5f       	subi	r24, 0xFF	; 255
 920:	89 83       	std	Y+1, r24	; 0x01
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	83 30       	cpi	r24, 0x03	; 3
 926:	58 f3       	brcs	.-42     	; 0x8fe <RTO_voidInitArrayFunctions+0x10>
		{
			RTO_AstrTasks[local_u8Counter].pf=NULL;
		}
}
 928:	0f 90       	pop	r0
 92a:	cf 91       	pop	r28
 92c:	df 91       	pop	r29
 92e:	08 95       	ret

00000930 <RTO_voidCreateTask>:

void RTO_voidCreateTask (u8 copy_u8priority, u16 copy_u16Periodicity, u16 copy_u16FirstDelay, void (*pf)(void))
{
 930:	df 93       	push	r29
 932:	cf 93       	push	r28
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	27 97       	sbiw	r28, 0x07	; 7
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	7b 83       	std	Y+3, r23	; 0x03
 948:	6a 83       	std	Y+2, r22	; 0x02
 94a:	5d 83       	std	Y+5, r21	; 0x05
 94c:	4c 83       	std	Y+4, r20	; 0x04
 94e:	3f 83       	std	Y+7, r19	; 0x07
 950:	2e 83       	std	Y+6, r18	; 0x06
	if ((copy_u8priority < RTO_u8_MAX_NUMBER_TASKS) && (pf != NULL))
 952:	89 81       	ldd	r24, Y+1	; 0x01
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	c0 f5       	brcc	.+112    	; 0x9c8 <RTO_voidCreateTask+0x98>
 958:	8e 81       	ldd	r24, Y+6	; 0x06
 95a:	9f 81       	ldd	r25, Y+7	; 0x07
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	a1 f1       	breq	.+104    	; 0x9c8 <RTO_voidCreateTask+0x98>
	{
		RTO_AstrTasks[copy_u8priority].FirstDelay=copy_u16FirstDelay;
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	c9 01       	movw	r24, r18
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	82 0f       	add	r24, r18
 96e:	93 1f       	adc	r25, r19
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	fc 01       	movw	r30, r24
 976:	eb 59       	subi	r30, 0x9B	; 155
 978:	ff 4f       	sbci	r31, 0xFF	; 255
 97a:	8c 81       	ldd	r24, Y+4	; 0x04
 97c:	9d 81       	ldd	r25, Y+5	; 0x05
 97e:	91 83       	std	Z+1, r25	; 0x01
 980:	80 83       	st	Z, r24
		RTO_AstrTasks[copy_u8priority].Periodicity=copy_u16Periodicity;
 982:	89 81       	ldd	r24, Y+1	; 0x01
 984:	28 2f       	mov	r18, r24
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	c9 01       	movw	r24, r18
 98a:	88 0f       	add	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	82 0f       	add	r24, r18
 990:	93 1f       	adc	r25, r19
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	fc 01       	movw	r30, r24
 99a:	eb 59       	subi	r30, 0x9B	; 155
 99c:	ff 4f       	sbci	r31, 0xFF	; 255
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	9b 81       	ldd	r25, Y+3	; 0x03
 9a2:	91 83       	std	Z+1, r25	; 0x01
 9a4:	80 83       	st	Z, r24
		RTO_AstrTasks[copy_u8priority].pf=pf;
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	c9 01       	movw	r24, r18
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	82 0f       	add	r24, r18
 9b4:	93 1f       	adc	r25, r19
 9b6:	88 0f       	add	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	fc 01       	movw	r30, r24
 9bc:	e7 59       	subi	r30, 0x97	; 151
 9be:	ff 4f       	sbci	r31, 0xFF	; 255
 9c0:	8e 81       	ldd	r24, Y+6	; 0x06
 9c2:	9f 81       	ldd	r25, Y+7	; 0x07
 9c4:	91 83       	std	Z+1, r25	; 0x01
 9c6:	80 83       	st	Z, r24
	}
}
 9c8:	27 96       	adiw	r28, 0x07	; 7
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <RTO_voidScheduler>:

void RTO_voidScheduler (void)
{
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	0f 92       	push	r0
 9e0:	cd b7       	in	r28, 0x3d	; 61
 9e2:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Counter;
	for (local_u8Counter=0; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS; local_u8Counter++)
 9e4:	19 82       	std	Y+1, r1	; 0x01
 9e6:	78 c0       	rjmp	.+240    	; 0xad8 <RTO_voidScheduler+0xfe>
	{
		if (RTO_AstrTasks[local_u8Counter].FirstDelay==0)
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	c9 01       	movw	r24, r18
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	82 0f       	add	r24, r18
 9f6:	93 1f       	adc	r25, r19
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	fc 01       	movw	r30, r24
 9fe:	eb 59       	subi	r30, 0x9B	; 155
 a00:	ff 4f       	sbci	r31, 0xFF	; 255
 a02:	80 81       	ld	r24, Z
 a04:	91 81       	ldd	r25, Z+1	; 0x01
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	09 f0       	breq	.+2      	; 0xa0c <RTO_voidScheduler+0x32>
 a0a:	45 c0       	rjmp	.+138    	; 0xa96 <RTO_voidScheduler+0xbc>
		{
			if (RTO_AstrTasks[local_u8Counter].pf != NULL)
 a0c:	89 81       	ldd	r24, Y+1	; 0x01
 a0e:	28 2f       	mov	r18, r24
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	c9 01       	movw	r24, r18
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	82 0f       	add	r24, r18
 a1a:	93 1f       	adc	r25, r19
 a1c:	88 0f       	add	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	fc 01       	movw	r30, r24
 a22:	e7 59       	subi	r30, 0x97	; 151
 a24:	ff 4f       	sbci	r31, 0xFF	; 255
 a26:	80 81       	ld	r24, Z
 a28:	91 81       	ldd	r25, Z+1	; 0x01
 a2a:	00 97       	sbiw	r24, 0x00	; 0
 a2c:	89 f0       	breq	.+34     	; 0xa50 <RTO_voidScheduler+0x76>
			{
				RTO_AstrTasks[local_u8Counter].pf();
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	28 2f       	mov	r18, r24
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	c9 01       	movw	r24, r18
 a36:	88 0f       	add	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	82 0f       	add	r24, r18
 a3c:	93 1f       	adc	r25, r19
 a3e:	88 0f       	add	r24, r24
 a40:	99 1f       	adc	r25, r25
 a42:	fc 01       	movw	r30, r24
 a44:	e7 59       	subi	r30, 0x97	; 151
 a46:	ff 4f       	sbci	r31, 0xFF	; 255
 a48:	01 90       	ld	r0, Z+
 a4a:	f0 81       	ld	r31, Z
 a4c:	e0 2d       	mov	r30, r0
 a4e:	09 95       	icall
			}
			RTO_AstrTasks[local_u8Counter].FirstDelay= RTO_AstrTasks[local_u8Counter].Periodicity - 1;
 a50:	89 81       	ldd	r24, Y+1	; 0x01
 a52:	48 2f       	mov	r20, r24
 a54:	50 e0       	ldi	r21, 0x00	; 0
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	28 2f       	mov	r18, r24
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	c9 01       	movw	r24, r18
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	82 0f       	add	r24, r18
 a64:	93 1f       	adc	r25, r19
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	fc 01       	movw	r30, r24
 a6e:	eb 59       	subi	r30, 0x9B	; 155
 a70:	ff 4f       	sbci	r31, 0xFF	; 255
 a72:	80 81       	ld	r24, Z
 a74:	91 81       	ldd	r25, Z+1	; 0x01
 a76:	9c 01       	movw	r18, r24
 a78:	21 50       	subi	r18, 0x01	; 1
 a7a:	30 40       	sbci	r19, 0x00	; 0
 a7c:	ca 01       	movw	r24, r20
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	84 0f       	add	r24, r20
 a84:	95 1f       	adc	r25, r21
 a86:	88 0f       	add	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	fc 01       	movw	r30, r24
 a8c:	eb 59       	subi	r30, 0x9B	; 155
 a8e:	ff 4f       	sbci	r31, 0xFF	; 255
 a90:	31 83       	std	Z+1, r19	; 0x01
 a92:	20 83       	st	Z, r18
 a94:	1e c0       	rjmp	.+60     	; 0xad2 <RTO_voidScheduler+0xf8>
		}
		else
		{
			RTO_AstrTasks[local_u8Counter].FirstDelay--;
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	28 2f       	mov	r18, r24
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	c9 01       	movw	r24, r18
 a9e:	88 0f       	add	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	82 0f       	add	r24, r18
 aa4:	93 1f       	adc	r25, r19
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	fc 01       	movw	r30, r24
 aac:	eb 59       	subi	r30, 0x9B	; 155
 aae:	ff 4f       	sbci	r31, 0xFF	; 255
 ab0:	80 81       	ld	r24, Z
 ab2:	91 81       	ldd	r25, Z+1	; 0x01
 ab4:	ac 01       	movw	r20, r24
 ab6:	41 50       	subi	r20, 0x01	; 1
 ab8:	50 40       	sbci	r21, 0x00	; 0
 aba:	c9 01       	movw	r24, r18
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	fc 01       	movw	r30, r24
 aca:	eb 59       	subi	r30, 0x9B	; 155
 acc:	ff 4f       	sbci	r31, 0xFF	; 255
 ace:	51 83       	std	Z+1, r21	; 0x01
 ad0:	40 83       	st	Z, r20
}

void RTO_voidScheduler (void)
{
	u8 local_u8Counter;
	for (local_u8Counter=0; local_u8Counter < RTO_u8_MAX_NUMBER_TASKS; local_u8Counter++)
 ad2:	89 81       	ldd	r24, Y+1	; 0x01
 ad4:	8f 5f       	subi	r24, 0xFF	; 255
 ad6:	89 83       	std	Y+1, r24	; 0x01
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	83 30       	cpi	r24, 0x03	; 3
 adc:	08 f4       	brcc	.+2      	; 0xae0 <RTO_voidScheduler+0x106>
 ade:	84 cf       	rjmp	.-248    	; 0x9e8 <RTO_voidScheduler+0xe>
		{
			RTO_AstrTasks[local_u8Counter].FirstDelay--;
		}
	}

}
 ae0:	0f 90       	pop	r0
 ae2:	cf 91       	pop	r28
 ae4:	df 91       	pop	r29
 ae6:	08 95       	ret

00000ae8 <MTIMER0_voidInit>:
#define NULL 0

void (*TIMER0_OVF_CallBack)(void)= NULL;
void (*TIMER0_CTC_CallBack)(void)= NULL;
void MTIMER0_voidInit(void)
{
 ae8:	df 93       	push	r29
 aea:	cf 93       	push	r28
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
		TCCR0 |= CLK_CONFIGURATION;
    #elif TIMER0_MODE == PHASE_CORRECT_MODE

	#elif TIMER0_MODE == CTC_MODE
		// Set wave Generation Mode to CTC Mode
		CLR_BIT(TCCR0,3);
 af0:	a3 e5       	ldi	r26, 0x53	; 83
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	e3 e5       	ldi	r30, 0x53	; 83
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	87 7f       	andi	r24, 0xF7	; 247
 afc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
 afe:	a3 e5       	ldi	r26, 0x53	; 83
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	e3 e5       	ldi	r30, 0x53	; 83
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	80 64       	ori	r24, 0x40	; 64
 b0a:	8c 93       	st	X, r24
		// Turn on CTC Interrupt
		SET_BIT(TIMSK,1);
 b0c:	a9 e5       	ldi	r26, 0x59	; 89
 b0e:	b0 e0       	ldi	r27, 0x00	; 0
 b10:	e9 e5       	ldi	r30, 0x59	; 89
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	82 60       	ori	r24, 0x02	; 2
 b18:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,0);
 b1a:	a9 e5       	ldi	r26, 0x59	; 89
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	e9 e5       	ldi	r30, 0x59	; 89
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	8e 7f       	andi	r24, 0xFE	; 254
 b26:	8c 93       	st	X, r24
		// Set Compare Match Unit Value
		OCR0=OCR0_VALUE;
 b28:	ec e5       	ldi	r30, 0x5C	; 92
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	87 ec       	ldi	r24, 0xC7	; 199
 b2e:	80 83       	st	Z, r24
		// Start Timer by setting its clock and Set OC0 Pin Action
		TCCR0 &= 0b11001000;
 b30:	a3 e5       	ldi	r26, 0x53	; 83
 b32:	b0 e0       	ldi	r27, 0x00	; 0
 b34:	e3 e5       	ldi	r30, 0x53	; 83
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	88 7c       	andi	r24, 0xC8	; 200
 b3c:	8c 93       	st	X, r24
		TCCR0 |= (CLK_CONFIGURATION|(CTC_OC0_PIN_ACTION<<4));
 b3e:	a3 e5       	ldi	r26, 0x53	; 83
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	e3 e5       	ldi	r30, 0x53	; 83
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	82 60       	ori	r24, 0x02	; 2
 b4a:	8c 93       	st	X, r24

    #else
		#error  Wrong TIMER0 Mode Configuration
    #endif

}
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer (void)
{
 b52:	df 93       	push	r29
 b54:	cf 93       	push	r28
 b56:	cd b7       	in	r28, 0x3d	; 61
 b58:	de b7       	in	r29, 0x3e	; 62
	// Stop Clock of Timer 0
	TCCR0 &= 0b11111000;
 b5a:	a3 e5       	ldi	r26, 0x53	; 83
 b5c:	b0 e0       	ldi	r27, 0x00	; 0
 b5e:	e3 e5       	ldi	r30, 0x53	; 83
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	80 81       	ld	r24, Z
 b64:	88 7f       	andi	r24, 0xF8	; 248
 b66:	8c 93       	st	X, r24
}
 b68:	cf 91       	pop	r28
 b6a:	df 91       	pop	r29
 b6c:	08 95       	ret

00000b6e <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue (u8 A_u8PreloadValue)
{
 b6e:	df 93       	push	r29
 b70:	cf 93       	push	r28
 b72:	0f 92       	push	r0
 b74:	cd b7       	in	r28, 0x3d	; 61
 b76:	de b7       	in	r29, 0x3e	; 62
 b78:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=A_u8PreloadValue;
 b7a:	e2 e5       	ldi	r30, 0x52	; 82
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	89 81       	ldd	r24, Y+1	; 0x01
 b80:	80 83       	st	Z, r24
}
 b82:	0f 90       	pop	r0
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	08 95       	ret

00000b8a <MTIMER0_voidsetCallBackOVF>:

void MTIMER0_voidsetCallBackOVF (void (*ptrToFunc) (void))
{
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	00 d0       	rcall	.+0      	; 0xb90 <MTIMER0_voidsetCallBackOVF+0x6>
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
 b94:	9a 83       	std	Y+2, r25	; 0x02
 b96:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc!=NULL)
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	9a 81       	ldd	r25, Y+2	; 0x02
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	31 f0       	breq	.+12     	; 0xbac <MTIMER0_voidsetCallBackOVF+0x22>
	{
		TIMER0_OVF_CallBack=ptrToFunc;
 ba0:	89 81       	ldd	r24, Y+1	; 0x01
 ba2:	9a 81       	ldd	r25, Y+2	; 0x02
 ba4:	90 93 61 00 	sts	0x0061, r25
 ba8:	80 93 60 00 	sts	0x0060, r24
	}
}
 bac:	0f 90       	pop	r0
 bae:	0f 90       	pop	r0
 bb0:	cf 91       	pop	r28
 bb2:	df 91       	pop	r29
 bb4:	08 95       	ret

00000bb6 <MTIMER0_voidsetCallBackCTC>:

void MTIMER0_voidsetCallBackCTC (void (*ptrToFunc) (void))
{
 bb6:	df 93       	push	r29
 bb8:	cf 93       	push	r28
 bba:	00 d0       	rcall	.+0      	; 0xbbc <MTIMER0_voidsetCallBackCTC+0x6>
 bbc:	cd b7       	in	r28, 0x3d	; 61
 bbe:	de b7       	in	r29, 0x3e	; 62
 bc0:	9a 83       	std	Y+2, r25	; 0x02
 bc2:	89 83       	std	Y+1, r24	; 0x01
	if (ptrToFunc!=NULL)
 bc4:	89 81       	ldd	r24, Y+1	; 0x01
 bc6:	9a 81       	ldd	r25, Y+2	; 0x02
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	31 f0       	breq	.+12     	; 0xbd8 <MTIMER0_voidsetCallBackCTC+0x22>
	{
		TIMER0_CTC_CallBack=ptrToFunc;
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	9a 81       	ldd	r25, Y+2	; 0x02
 bd0:	90 93 63 00 	sts	0x0063, r25
 bd4:	80 93 62 00 	sts	0x0062, r24
	}
}
 bd8:	0f 90       	pop	r0
 bda:	0f 90       	pop	r0
 bdc:	cf 91       	pop	r28
 bde:	df 91       	pop	r29
 be0:	08 95       	ret

00000be2 <MTIMER0_voidSetOCR0Value>:



void MTIMER0_voidSetOCR0Value(u8 A_u8Value)
{
 be2:	df 93       	push	r29
 be4:	cf 93       	push	r28
 be6:	0f 92       	push	r0
 be8:	cd b7       	in	r28, 0x3d	; 61
 bea:	de b7       	in	r29, 0x3e	; 62
 bec:	89 83       	std	Y+1, r24	; 0x01
	OCR0=A_u8Value;
 bee:	ec e5       	ldi	r30, 0x5C	; 92
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	89 81       	ldd	r24, Y+1	; 0x01
 bf4:	80 83       	st	Z, r24
}
 bf6:	0f 90       	pop	r0
 bf8:	cf 91       	pop	r28
 bfa:	df 91       	pop	r29
 bfc:	08 95       	ret

00000bfe <__vector_11>:


void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
 bfe:	1f 92       	push	r1
 c00:	0f 92       	push	r0
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	0f 92       	push	r0
 c06:	11 24       	eor	r1, r1
 c08:	2f 93       	push	r18
 c0a:	3f 93       	push	r19
 c0c:	4f 93       	push	r20
 c0e:	5f 93       	push	r21
 c10:	6f 93       	push	r22
 c12:	7f 93       	push	r23
 c14:	8f 93       	push	r24
 c16:	9f 93       	push	r25
 c18:	af 93       	push	r26
 c1a:	bf 93       	push	r27
 c1c:	ef 93       	push	r30
 c1e:	ff 93       	push	r31
 c20:	df 93       	push	r29
 c22:	cf 93       	push	r28
 c24:	cd b7       	in	r28, 0x3d	; 61
 c26:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CallBack!= NULL)
 c28:	80 91 60 00 	lds	r24, 0x0060
 c2c:	90 91 61 00 	lds	r25, 0x0061
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	29 f0       	breq	.+10     	; 0xc3e <__vector_11+0x40>
	{
		TIMER0_OVF_CallBack();
 c34:	e0 91 60 00 	lds	r30, 0x0060
 c38:	f0 91 61 00 	lds	r31, 0x0061
 c3c:	09 95       	icall
	}
}
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	ff 91       	pop	r31
 c44:	ef 91       	pop	r30
 c46:	bf 91       	pop	r27
 c48:	af 91       	pop	r26
 c4a:	9f 91       	pop	r25
 c4c:	8f 91       	pop	r24
 c4e:	7f 91       	pop	r23
 c50:	6f 91       	pop	r22
 c52:	5f 91       	pop	r21
 c54:	4f 91       	pop	r20
 c56:	3f 91       	pop	r19
 c58:	2f 91       	pop	r18
 c5a:	0f 90       	pop	r0
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	0f 90       	pop	r0
 c60:	1f 90       	pop	r1
 c62:	18 95       	reti

00000c64 <__vector_10>:


void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
 c64:	1f 92       	push	r1
 c66:	0f 92       	push	r0
 c68:	0f b6       	in	r0, 0x3f	; 63
 c6a:	0f 92       	push	r0
 c6c:	11 24       	eor	r1, r1
 c6e:	2f 93       	push	r18
 c70:	3f 93       	push	r19
 c72:	4f 93       	push	r20
 c74:	5f 93       	push	r21
 c76:	6f 93       	push	r22
 c78:	7f 93       	push	r23
 c7a:	8f 93       	push	r24
 c7c:	9f 93       	push	r25
 c7e:	af 93       	push	r26
 c80:	bf 93       	push	r27
 c82:	ef 93       	push	r30
 c84:	ff 93       	push	r31
 c86:	df 93       	push	r29
 c88:	cf 93       	push	r28
 c8a:	cd b7       	in	r28, 0x3d	; 61
 c8c:	de b7       	in	r29, 0x3e	; 62
	static u8 local_u8Counter=0;
	local_u8Counter++;
 c8e:	80 91 64 00 	lds	r24, 0x0064
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	80 93 64 00 	sts	0x0064, r24
	if (local_u8Counter == NO_OF_OVF_CTC_MODE)
 c98:	80 91 64 00 	lds	r24, 0x0064
 c9c:	85 30       	cpi	r24, 0x05	; 5
 c9e:	69 f4       	brne	.+26     	; 0xcba <__vector_10+0x56>
	{
		local_u8Counter=0;
 ca0:	10 92 64 00 	sts	0x0064, r1
		if (TIMER0_CTC_CallBack!= NULL)
 ca4:	80 91 62 00 	lds	r24, 0x0062
 ca8:	90 91 63 00 	lds	r25, 0x0063
 cac:	00 97       	sbiw	r24, 0x00	; 0
 cae:	29 f0       	breq	.+10     	; 0xcba <__vector_10+0x56>
		{
			TIMER0_CTC_CallBack();
 cb0:	e0 91 62 00 	lds	r30, 0x0062
 cb4:	f0 91 63 00 	lds	r31, 0x0063
 cb8:	09 95       	icall
		}
	}
}
 cba:	cf 91       	pop	r28
 cbc:	df 91       	pop	r29
 cbe:	ff 91       	pop	r31
 cc0:	ef 91       	pop	r30
 cc2:	bf 91       	pop	r27
 cc4:	af 91       	pop	r26
 cc6:	9f 91       	pop	r25
 cc8:	8f 91       	pop	r24
 cca:	7f 91       	pop	r23
 ccc:	6f 91       	pop	r22
 cce:	5f 91       	pop	r21
 cd0:	4f 91       	pop	r20
 cd2:	3f 91       	pop	r19
 cd4:	2f 91       	pop	r18
 cd6:	0f 90       	pop	r0
 cd8:	0f be       	out	0x3f, r0	; 63
 cda:	0f 90       	pop	r0
 cdc:	1f 90       	pop	r1
 cde:	18 95       	reti

00000ce0 <main>:
void AppTask2(void);
void AppTask3(void);


void (main)(void)
{
 ce0:	df 93       	push	r29
 ce2:	cf 93       	push	r28
 ce4:	cd b7       	in	r28, 0x3d	; 61
 ce6:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
 ce8:	0e 94 3e 00 	call	0x7c	; 0x7c <MDIO_voidInit>
	MGI_voidEnable();
 cec:	0e 94 08 04 	call	0x810	; 0x810 <MGI_voidEnable>
	RTO_voidInitArrayFunctions();
 cf0:	0e 94 77 04 	call	0x8ee	; 0x8ee <RTO_voidInitArrayFunctions>
	RTO_voidCreateTask(0,1000,0,&AppTask1);
 cf4:	28 e9       	ldi	r18, 0x98	; 152
 cf6:	36 e0       	ldi	r19, 0x06	; 6
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	68 ee       	ldi	r22, 0xE8	; 232
 cfc:	73 e0       	ldi	r23, 0x03	; 3
 cfe:	40 e0       	ldi	r20, 0x00	; 0
 d00:	50 e0       	ldi	r21, 0x00	; 0
 d02:	0e 94 98 04 	call	0x930	; 0x930 <RTO_voidCreateTask>
	RTO_voidCreateTask(1,2000,0,&AppTask2);
 d06:	23 ea       	ldi	r18, 0xA3	; 163
 d08:	36 e0       	ldi	r19, 0x06	; 6
 d0a:	81 e0       	ldi	r24, 0x01	; 1
 d0c:	60 ed       	ldi	r22, 0xD0	; 208
 d0e:	77 e0       	ldi	r23, 0x07	; 7
 d10:	40 e0       	ldi	r20, 0x00	; 0
 d12:	50 e0       	ldi	r21, 0x00	; 0
 d14:	0e 94 98 04 	call	0x930	; 0x930 <RTO_voidCreateTask>
	RTO_voidCreateTask(2,5000,0,&AppTask3);
 d18:	2e ea       	ldi	r18, 0xAE	; 174
 d1a:	36 e0       	ldi	r19, 0x06	; 6
 d1c:	82 e0       	ldi	r24, 0x02	; 2
 d1e:	68 e8       	ldi	r22, 0x88	; 136
 d20:	73 e1       	ldi	r23, 0x13	; 19
 d22:	40 e0       	ldi	r20, 0x00	; 0
 d24:	50 e0       	ldi	r21, 0x00	; 0
 d26:	0e 94 98 04 	call	0x930	; 0x930 <RTO_voidCreateTask>
	RTO_voidInit();
 d2a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <RTO_voidInit>
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <main+0x4e>

00000d30 <AppTask1>:

	}
}

void AppTask1(void)
{
 d30:	df 93       	push	r29
 d32:	cf 93       	push	r28
 d34:	cd b7       	in	r28, 0x3d	; 61
 d36:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLed(DIO_PORTA, PIN0);
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	60 e0       	ldi	r22, 0x00	; 0
 d3c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <HLED_voidToggleLed>
}
 d40:	cf 91       	pop	r28
 d42:	df 91       	pop	r29
 d44:	08 95       	ret

00000d46 <AppTask2>:

void AppTask2(void)
{
 d46:	df 93       	push	r29
 d48:	cf 93       	push	r28
 d4a:	cd b7       	in	r28, 0x3d	; 61
 d4c:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLed(DIO_PORTA, PIN1);
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	61 e0       	ldi	r22, 0x01	; 1
 d52:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <HLED_voidToggleLed>
}
 d56:	cf 91       	pop	r28
 d58:	df 91       	pop	r29
 d5a:	08 95       	ret

00000d5c <AppTask3>:

void AppTask3(void)
{
 d5c:	df 93       	push	r29
 d5e:	cf 93       	push	r28
 d60:	cd b7       	in	r28, 0x3d	; 61
 d62:	de b7       	in	r29, 0x3e	; 62
	HLED_voidToggleLed(DIO_PORTA, PIN2);
 d64:	80 e0       	ldi	r24, 0x00	; 0
 d66:	62 e0       	ldi	r22, 0x02	; 2
 d68:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <HLED_voidToggleLed>
}
 d6c:	cf 91       	pop	r28
 d6e:	df 91       	pop	r29
 d70:	08 95       	ret

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
